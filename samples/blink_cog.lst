00000                 | 
00000                 | #line 1 "/home/ermosh/flexprop/samples/blink_cog.p2asm"
00000                 | con
00000                 | 	_clkfreq = 160000000
00000                 | 	_clkmode = 16779259
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 160000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $10007fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 9A 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 CC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 03 80 80 FF 
00420 007 00 F0 67 FD | 	hubset	##16779256
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 03 80 00 FF 
00430 00b FB ED 07 F6 | 	mov	pa, ##16779259
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e B4 C4 84 FF 
00440 00f 14 00 6C FC | 	wrlong	##160000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 64 07 A0 FD | 	call	#_main
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 A4 61 FD | 	cogid	arg01
00614 084 03 A4 61 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 91 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 9B 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 A5 05 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D 9A 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c 2B 30 61 FD |     pop	fcache_tmpb_
00638 08d F6 31 01 F1 |     add	fcache_tmpb_, pa
0063c 08e 2A 30 61 FD |     push	fcache_tmpb_
00640 08f F6 31 81 F1 |     sub	fcache_tmpb_, pa
00644 090 02 EC 47 F0 |     shr	pa, #2
00648 091 00 EC 8F F9 |     altd	pa
0064c 092 97 00 00 F6 |     mov	 0-0, ret_instr_
00650 093 01 EC 87 F1 |     sub	pa, #1
00654 094 28 EC 63 FD |     setq	pa
00658 095 98 00 00 FB |     rdlong	$0, fcache_tmpb_
0065c 096 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00660 097             | ret_instr_
00660 097 2D 00 64 FD |     ret
00664 098             | fcache_tmpb_
00664 098 00 00 00 00 |     long 0
00668 099             | builtin_bytefill_
00668 099 01 A8 55 F0 |         shr	arg03, #1 wc
0066c 09a D2 A6 41 CC |  if_c   wrbyte	arg02, arg01
00670 09b 01 A4 05 C1 |  if_c   add	arg01, #1
00674 09c 00 A6 FD F9 |         movbyts	arg02, #0
00678 09d             | builtin_wordfill_
00678 09d 01 A8 55 F0 |         shr	arg03, #1 wc
0067c 09e D2 A6 51 CC |  if_c   wrword	arg02, arg01
00680 09f 02 A4 05 C1 |  if_c   add	arg01, #2
00684 0a0 D3 A6 29 F9 |         setword	arg02, arg02, #1
00688 0a1             | builtin_longfill_
00688 0a1 D2 00 88 FC |         wrfast	#0,arg01
0068c 0a2 00 A8 0D F2 |         cmp	arg03, #0 wz
00690 0a3 D4 02 D8 5C |  if_nz  rep	#1, arg03
00694 0a4 17 A6 61 5D |  if_nz  wflong	arg02
00698 0a5 2D 00 64 FD |         ret
0069c 0a6             | COUNT_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | RETADDR_
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | fp
006a4 0a8 00 00 00 00 |     long 0
006a8 0a9             | pushregs_
006a8 0a9 2B EC 63 FD |     pop  pa
006ac 0aa 2B 4E 61 FD |     pop  RETADDR_
006b0 0ab 03 4C 95 FB |     tjz  COUNT_, #pushregs_done_
006b4 0ac FF 4D 8D F9 |     altd  COUNT_, #511
006b8 0ad 28 00 64 FD |     setq #0-0
006bc 0ae 61 AF 65 FC |     wrlong local01, ptra++
006c0 0af             | pushregs_done_
006c0 0af 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c4 0b0 61 4D 65 FC |     wrlong COUNT_, ptra++
006c8 0b1 F8 51 01 F6 |     mov    fp, ptra
006cc 0b2 2C EC 63 FD |     jmp  pa
006d0 0b3             |  popregs_
006d0 0b3 2B EC 63 FD |     pop    pa
006d4 0b4 28 04 64 FD |     setq   #2
006d8 0b5 5F 4D 05 FB |     rdlong COUNT_, --ptra
006dc 0b6 02 4C 75 FB |     djf    COUNT_, #popregs__ret
006e0 0b7 28 4C 61 FD |     setq   COUNT_
006e4 0b8 5F AF 05 FB |     rdlong local01, --ptra
006e8 0b9             | popregs__ret
006e8 0b9 2A 4E 61 FD |     push   RETADDR_
006ec 0ba 2C EC 63 FD |     jmp    pa
006f0 0bb             | 
006f0 0bb             | divide_
006f0 0bb E3 C6 59 F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f4 0bc 6C 8E 61 FD |        wrc     itmp2_                         'store sign of y
006f8 0bd E2 C4 51 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006fc 0be E3 C4 11 FD |        qdiv    muldiva_, muldivb_             'queue divide
00700 0bf 01 8E 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00704 0c0 18 C6 61 FD |        getqx   muldivb_                       'get quotient
00708 0c1 19 C4 61 FD |        getqy   muldiva_                       'get remainder
0070c 0c2 E2 C4 81 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
00710 0c3 00 8E 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00714 0c4 E3 C6 81 06 |  _ret_ negc    muldivb_,muldivb_     
00718 0c5             | 
00718 0c5             | entryptr__
00718 0c5 04 04 00 00 | 	long	@entry
0071c 0c6             | itmp1_
0071c 0c6 00 00 00 00 | 	long	0
00720 0c7             | itmp2_
00720 0c7 00 00 00 00 | 	long	0
00724 0c8             | objptr
00724 0c8 60 0E 00 00 | 	long	@objmem
00728 0c9             | ptr___system__dat__
00728 0c9 40 0E 00 00 | 	long	@__system__dat_
0072c 0ca             | ptr__blink_
0072c 0ca 40 07 00 00 | 	long	@_blink
00730 0cb             | ptr__dat__
00730 0cb 40 0D 00 00 | 	long	@_dat_
00734 0cc             | ptr_stackspace_
00734 0cc 60 0E 00 00 | 	long	@stackspace
00738 0cd             | result1
00738 0cd 00 00 00 00 | 	long	0
0073c 0ce             | result2
0073c 0ce 01 00 00 00 | 	long	1
00740 0cf             | COG_BSS_START
00740 0cf             | 	fit	480
00740                 | 	orgh
00740                 | hubentry
00740                 | 
00740                 | _blink
00740     D2 9E 01 FB | 	rdlong	_var01, arg01
00744     04 A4 05 F1 | 	add	arg01, #4
00748     D2 A4 01 FB | 	rdlong	arg01, arg01
0074c                 | ' 
0074c                 | ' 
0074c                 | '     for(;;) {
0074c     BC F8 9F FE | 	loc	pa,	#(@LR__0003-@LR__0001)
00750     8C 00 A0 FD | 	call	#FCACHE_LOAD_
00754                 | LR__0001
00754     00 04 DC FC | 	rep	@LR__0004, #0
00758                 | LR__0002
00758     5F 9E 61 FD | 	drvnot	_var01
0075c     1F A4 61 FD | 	waitx	arg01
00760                 | LR__0003
00760                 | LR__0004
00760                 | _blink_ret
00760     2D 00 64 FD | 	ret
00764                 | 
00764                 | _main
00764     00 4C 05 F6 | 	mov	COUNT_, #0
00768     A9 00 A0 FD | 	call	#pushregs_
0076c     0C F0 07 F1 | 	add	ptra, #12
00770     A8 70 68 FC | 	wrlong	#56, fp
00774     04 50 05 F1 | 	add	fp, #4
00778     2D 31 81 FF 
0077c     A8 00 68 FC | 	wrlong	##40000000, fp
00780     04 50 85 F1 | 	sub	fp, #4
00784     CB A4 01 F6 | 	mov	arg01, ptr__dat__
00788     D2 90 61 FC | 	wrlong	objptr, arg01
0078c     04 A4 05 F1 | 	add	arg01, #4
00790     D2 94 61 FC | 	wrlong	ptr__blink_, arg01
00794     04 A4 05 F1 | 	add	arg01, #4
00798     D2 50 61 FC | 	wrlong	fp, arg01
0079c     C5 A6 01 F6 | 	mov	arg02, entryptr__
007a0     CB A8 01 F6 | 	mov	arg03, ptr__dat__
007a4     1E AA 05 F6 | 	mov	arg04, #30
007a8     28 A8 61 FD | 	setq	arg03
007ac     D3 AA F1 FC | 	coginit	arg04, arg02 wc
007b0     01 AA 65 C6 |  if_b	neg	arg04, #1
007b4     08 50 05 F1 | 	add	fp, #8
007b8     A8 AA 61 FC | 	wrlong	arg04, fp
007bc     08 50 85 F1 | 	sub	fp, #8
007c0     1C 92 05 F1 | 	add	ptr___system__dat__, #28
007c4     C9 A4 01 F6 | 	mov	arg01, ptr___system__dat__
007c8     1C 92 85 F1 | 	sub	ptr___system__dat__, #28
007cc     40 01 B0 FD | 	call	#__system___lockmem
007d0     06 00 00 FF 
007d4     24 A7 05 F6 | 	mov	arg02, ##@LR__0110
007d8     00 A4 05 F6 | 	mov	arg01, #0
007dc     00 A8 05 F6 | 	mov	arg03, #0
007e0     D3 AA 09 F6 | 	mov	arg04, arg02 wz
007e4     00 A6 05 56 |  if_ne	mov	arg02, #0
007e8     D5 A8 01 56 |  if_ne	mov	arg03, arg04
007ec     01 A4 05 56 |  if_ne	mov	arg01, #1
007f0     DC 01 B0 5D |  if_ne	call	#__system___fmtstr
007f4     08 50 05 F1 | 	add	fp, #8
007f8     A8 A8 01 FB | 	rdlong	arg03, fp
007fc     08 50 85 F1 | 	sub	fp, #8
00800     0A AA 05 F6 | 	mov	arg04, #10
00804     00 A6 05 F6 | 	mov	arg02, #0
00808     01 A4 05 F6 | 	mov	arg01, #1
0080c     7C 02 B0 FD | 	call	#__system___fmtnum
00810     06 00 00 FF 
00814     31 A7 05 F6 | 	mov	arg02, ##@LR__0111
00818     00 A4 05 F6 | 	mov	arg01, #0
0081c     00 A8 05 F6 | 	mov	arg03, #0
00820     D3 AA 09 F6 | 	mov	arg04, arg02 wz
00824     00 A6 05 56 |  if_ne	mov	arg02, #0
00828     D5 A8 01 56 |  if_ne	mov	arg03, arg04
0082c     01 A4 05 56 |  if_ne	mov	arg01, #1
00830     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
00834     A8 A8 01 FB | 	rdlong	arg03, fp
00838     0A AA 05 F6 | 	mov	arg04, #10
0083c     00 A6 05 F6 | 	mov	arg02, #0
00840     01 A4 05 F6 | 	mov	arg01, #1
00844     44 02 B0 FD | 	call	#__system___fmtnum
00848     0A A4 05 F6 | 	mov	arg01, #10
0084c     E8 00 B0 FD | 	call	#__system___tx
00850     1C 92 05 F1 | 	add	ptr___system__dat__, #28
00854     C9 00 68 FC | 	wrlong	#0, ptr___system__dat__
00858                 | ' 
00858                 | ' 
00858                 | '     for(;;)
00858                 | LR__0010
00858     FC FF 9F FD | 	jmp	#LR__0010
0085c     A8 F0 03 F6 | 	mov	ptra, fp
00860     B3 00 A0 FD | 	call	#popregs_
00864                 | _main_ret
00864     2D 00 64 FD | 	ret
00868                 | hubexit
00868     81 00 80 FD | 	jmp	#cogexit
0086c                 | 
0086c                 | __system___setbaud
0086c     14 C4 05 FB | 	rdlong	muldiva_, #20
00870     D2 C6 01 F6 | 	mov	muldivb_, arg01
00874     BB 00 A0 FD | 	call	#divide_
00878     94 F7 9F FE | 	loc	pa,	#(@LR__0021-@LR__0020)
0087c     8C 00 A0 FD | 	call	#FCACHE_LOAD_
00880                 | LR__0020
00880     00 9A 05 F6 | 	mov	result1, #0
00884     3E 9A 9D FA | 	rdpin	result1, #62 wc
00888     CE 9C A1 F1 | 	subx	result2, result2
0088c     F0 FF 9F CD |  if_b	jmp	#LR__0020
00890                 | LR__0021
00890     40 7C 64 FD | 	dirl	#62
00894     40 7E 64 FD | 	dirl	#63
00898     C9 C6 61 FC | 	wrlong	muldivb_, ptr___system__dat__
0089c     10 C6 65 F0 | 	shl	muldivb_, #16
008a0     07 A6 05 F6 | 	mov	arg02, #7
008a4     E3 A6 01 F1 | 	add	arg02, muldivb_
008a8     3E F8 0C FC | 	wrpin	#124, #62
008ac     3E A6 15 FC | 	wxpin	arg02, #62
008b0     3F 7C 0C FC | 	wrpin	#62, #63
008b4     14 A6 05 F1 | 	add	arg02, #20
008b8     3F A6 15 FC | 	wxpin	arg02, #63
008bc     41 7C 64 FD | 	dirh	#62
008c0     41 7E 64 FD | 	dirh	#63
008c4                 | __system___setbaud_ret
008c4     2D 00 64 FD | 	ret
008c8                 | 
008c8                 | __system___txraw
008c8     01 4C 05 F6 | 	mov	COUNT_, #1
008cc     A9 00 A0 FD | 	call	#pushregs_
008d0     D2 AE 01 F6 | 	mov	local01, arg01
008d4     38 F7 9F FE | 	loc	pa,	#(@LR__0031-@LR__0030)
008d8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
008dc                 | LR__0030
008dc     00 9A 05 F6 | 	mov	result1, #0
008e0     3E 9A 9D FA | 	rdpin	result1, #62 wc
008e4     CE 9C A1 F1 | 	subx	result2, result2
008e8     F0 FF 9F CD |  if_b	jmp	#LR__0030
008ec                 | LR__0031
008ec     C9 9A 09 FB | 	rdlong	result1, ptr___system__dat__ wz
008f0     C2 01 00 AF 
008f4     00 A4 05 A6 |  if_e	mov	arg01, ##230400
008f8     70 FF BF AD |  if_e	call	#__system___setbaud
008fc     3E AE 25 FC | 	wypin	local01, #62
00900     01 9A 05 F6 | 	mov	result1, #1
00904     A8 F0 03 F6 | 	mov	ptra, fp
00908     B3 00 A0 FD | 	call	#popregs_
0090c                 | __system___txraw_ret
0090c     2D 00 64 FD | 	ret
00910                 | 
00910                 | __system___lockmem
00910     00 9A 05 F6 | 	mov	result1, #0
00914     01 9A 61 FD | 	cogid	result1
00918     00 9B 05 F1 | 	add	result1, #256
0091c                 | LR__0040
0091c     D2 9E 09 FB | 	rdlong	_var01, arg01 wz
00920     D2 9A 61 AC |  if_e	wrlong	result1, arg01
00924     D2 9E 01 AB |  if_e	rdlong	_var01, arg01
00928     D2 9E 01 AB |  if_e	rdlong	_var01, arg01
0092c     CD 9E 09 F2 | 	cmp	_var01, result1 wz
00930     E8 FF 9F 5D |  if_ne	jmp	#LR__0040
00934                 | __system___lockmem_ret
00934     2D 00 64 FD | 	ret
00938                 | 
00938                 | __system___tx
00938     02 4C 05 F6 | 	mov	COUNT_, #2
0093c     A9 00 A0 FD | 	call	#pushregs_
00940     D2 AE 01 F6 | 	mov	local01, arg01
00944     0A AE 0D F2 | 	cmp	local01, #10 wz
00948     18 00 90 5D |  if_ne	jmp	#LR__0050
0094c     08 92 05 F1 | 	add	ptr___system__dat__, #8
00950     C9 B0 01 FB | 	rdlong	local02, ptr___system__dat__
00954     08 92 85 F1 | 	sub	ptr___system__dat__, #8
00958     02 B0 CD F7 | 	test	local02, #2 wz
0095c     0D A4 05 56 |  if_ne	mov	arg01, #13
00960     64 FF BF 5D |  if_ne	call	#__system___txraw
00964                 | LR__0050
00964     D7 A4 01 F6 | 	mov	arg01, local01
00968     5C FF BF FD | 	call	#__system___txraw
0096c     A8 F0 03 F6 | 	mov	ptra, fp
00970     B3 00 A0 FD | 	call	#popregs_
00974                 | __system___tx_ret
00974     2D 00 64 FD | 	ret
00978                 | 
00978                 | __system___fmtchar
00978     00 4C 05 F6 | 	mov	COUNT_, #0
0097c     A9 00 A0 FD | 	call	#pushregs_
00980     10 F0 07 F1 | 	add	ptra, #16
00984     04 50 05 F1 | 	add	fp, #4
00988     A8 A4 61 FC | 	wrlong	arg01, fp
0098c     04 50 05 F1 | 	add	fp, #4
00990     A8 A6 61 FC | 	wrlong	arg02, fp
00994     04 50 05 F1 | 	add	fp, #4
00998     A8 A8 61 FC | 	wrlong	arg03, fp
0099c     D4 A8 E1 F8 | 	getbyte	arg03, arg03, #0
009a0     A8 A8 61 FC | 	wrlong	arg03, fp
009a4     08 50 85 F1 | 	sub	fp, #8
009a8     A8 A4 01 FB | 	rdlong	arg01, fp
009ac     04 50 05 F1 | 	add	fp, #4
009b0     A8 A6 01 FB | 	rdlong	arg02, fp
009b4     04 50 05 F1 | 	add	fp, #4
009b8     A8 A8 01 F6 | 	mov	arg03, fp
009bc     0C 50 85 F1 | 	sub	fp, #12
009c0     0C 00 B0 FD | 	call	#__system___fmtstr
009c4     A8 F0 03 F6 | 	mov	ptra, fp
009c8     B3 00 A0 FD | 	call	#popregs_
009cc                 | __system___fmtchar_ret
009cc     2D 00 64 FD | 	ret
009d0                 | 
009d0                 | __system___fmtstr
009d0     06 4C 05 F6 | 	mov	COUNT_, #6
009d4     A9 00 A0 FD | 	call	#pushregs_
009d8     D2 AE 01 F6 | 	mov	local01, arg01
009dc     D3 B0 01 F6 | 	mov	local02, arg02
009e0     D4 B2 01 F6 | 	mov	local03, arg03
009e4     D8 AA E1 F8 | 	getbyte	arg04, local02, #0
009e8     D9 A4 01 F6 | 	mov	arg01, local03
009ec     00 B4 05 F6 | 	mov	local04, #0
009f0     1C F6 9F FE | 	loc	pa,	#(@LR__0061-@LR__0060)
009f4     8C 00 A0 FD | 	call	#FCACHE_LOAD_
009f8                 | LR__0060
009f8     D2 9A C9 FA | 	rdbyte	result1, arg01 wz
009fc     01 B4 05 51 |  if_ne	add	local04, #1
00a00     01 A4 05 51 |  if_ne	add	arg01, #1
00a04     F0 FF 9F 5D |  if_ne	jmp	#LR__0060
00a08                 | LR__0061
00a08     00 AA 0D F2 | 	cmp	arg04, #0 wz
00a0c     D5 B4 79 53 |  if_ne	fles	local04, arg04 wcz
00a10     D8 A6 01 F6 | 	mov	arg02, local02
00a14     DA A8 01 F6 | 	mov	arg03, local04
00a18     D7 A4 01 F6 | 	mov	arg01, local01
00a1c     02 AA 05 F6 | 	mov	arg04, #2
00a20     F0 01 B0 FD | 	call	#__system___fmtpad
00a24     CD B6 01 F6 | 	mov	local05, result1
00a28     00 B6 55 F2 | 	cmps	local05, #0 wc
00a2c     DB 9A 01 C6 |  if_b	mov	result1, local05
00a30     4C 00 90 CD |  if_b	jmp	#LR__0064
00a34     00 B8 05 F6 | 	mov	local06, #0
00a38                 | LR__0062
00a38     DA B8 51 F2 | 	cmps	local06, local04 wc
00a3c     18 00 90 3D |  if_ae	jmp	#LR__0063
00a40     D9 A4 C1 FA | 	rdbyte	arg01, local03
00a44     01 B2 05 F1 | 	add	local03, #1
00a48     EC FE BF FD | 	call	#__system___tx
00a4c     01 B6 05 F1 | 	add	local05, #1
00a50     01 B8 05 F1 | 	add	local06, #1
00a54     E0 FF 9F FD | 	jmp	#LR__0062
00a58                 | LR__0063
00a58     D8 A6 01 F6 | 	mov	arg02, local02
00a5c     DA A8 01 F6 | 	mov	arg03, local04
00a60     D7 A4 01 F6 | 	mov	arg01, local01
00a64     01 AA 05 F6 | 	mov	arg04, #1
00a68     A8 01 B0 FD | 	call	#__system___fmtpad
00a6c     CD B8 01 F6 | 	mov	local06, result1
00a70     00 B8 55 F2 | 	cmps	local06, #0 wc
00a74     DC 9A 01 C6 |  if_b	mov	result1, local06
00a78     DC B6 01 31 |  if_ae	add	local05, local06
00a7c     DB 9A 01 36 |  if_ae	mov	result1, local05
00a80                 | LR__0064
00a80     A8 F0 03 F6 | 	mov	ptra, fp
00a84     B3 00 A0 FD | 	call	#popregs_
00a88                 | __system___fmtstr_ret
00a88     2D 00 64 FD | 	ret
00a8c                 | 
00a8c                 | __system___fmtnum
00a8c     0B 4C 05 F6 | 	mov	COUNT_, #11
00a90     A9 00 A0 FD | 	call	#pushregs_
00a94     D2 AE 01 F6 | 	mov	local01, arg01
00a98     D3 B0 01 F6 | 	mov	local02, arg02
00a9c     D4 B2 01 F6 | 	mov	local03, arg03
00aa0     D5 B4 01 F6 | 	mov	local04, arg04
00aa4     F8 B7 01 F6 | 	mov	local05, ptra
00aa8     DB B8 01 F6 | 	mov	local06, local05
00aac     00 BA 05 F6 | 	mov	local07, #0
00ab0     D8 BC 01 F6 | 	mov	local08, local02
00ab4     10 BC 45 F0 | 	shr	local08, #16
00ab8     3F BC 05 F5 | 	and	local08, #63
00abc     D8 BE E1 F8 | 	getbyte	local09, local02, #0
00ac0     D8 C0 01 F6 | 	mov	local10, local02
00ac4     1A C0 45 F0 | 	shr	local10, #26
00ac8     03 C0 05 F5 | 	and	local10, #3
00acc     E0 C2 01 F6 | 	mov	local11, local10
00ad0     01 BC 55 F2 | 	cmps	local08, #1 wc
00ad4     44 F0 07 F1 | 	add	ptra, #68
00ad8     DE C0 01 36 |  if_ae	mov	local10, local08
00adc     01 C0 85 31 |  if_ae	sub	local10, #1
00ae0     E0 BC 01 36 |  if_ae	mov	local08, local10
00ae4     41 BE 55 F2 | 	cmps	local09, #65 wc
00ae8     00 BE 0D C2 |  if_b	cmp	local09, #0 wz
00aec     40 BE 05 B6 |  if_nc_or_z	mov	local09, #64
00af0     03 C2 0D F2 | 	cmp	local11, #3 wz
00af4     00 C2 05 A6 |  if_e	mov	local11, #0
00af8     00 B2 55 52 |  if_ne	cmps	local03, #0 wc
00afc     04 C2 05 46 |  if_c_and_nz	mov	local11, #4
00b00     D9 B2 61 46 |  if_c_and_nz	neg	local03, local03
00b04     00 C2 0D F2 | 	cmp	local11, #0 wz
00b08     4C 00 90 AD |  if_e	jmp	#LR__0073
00b0c     01 BA 05 F6 | 	mov	local07, #1
00b10     DF BC 09 F2 | 	cmp	local08, local09 wz
00b14     18 00 90 5D |  if_ne	jmp	#LR__0071
00b18     05 BC 6D FB | 	djnz	local08, #LR__0070
00b1c     D7 A4 01 F6 | 	mov	arg01, local01
00b20     D8 A6 01 F6 | 	mov	arg02, local02
00b24     23 A8 05 F6 | 	mov	arg03, #35
00b28     4C FE BF FD | 	call	#__system___fmtchar
00b2c     8C 00 90 FD | 	jmp	#LR__0077
00b30                 | LR__0070
00b30                 | LR__0071
00b30     02 C2 0D F2 | 	cmp	local11, #2 wz
00b34     DC C0 01 A6 |  if_e	mov	local10, local06
00b38     01 B8 05 A1 |  if_e	add	local06, #1
00b3c     E0 40 48 AC |  if_e	wrbyte	#32, local10
00b40     14 00 90 AD |  if_e	jmp	#LR__0072
00b44     04 C2 0D F2 | 	cmp	local11, #4 wz
00b48     DC 5A 48 AC |  if_e	wrbyte	#45, local06
00b4c     01 B8 05 A1 |  if_e	add	local06, #1
00b50     DC 56 48 5C |  if_ne	wrbyte	#43, local06
00b54     01 B8 05 51 |  if_ne	add	local06, #1
00b58                 | LR__0072
00b58                 | LR__0073
00b58     DC A4 01 F6 | 	mov	arg01, local06
00b5c     D9 A6 01 F6 | 	mov	arg02, local03
00b60     DA A8 01 F6 | 	mov	arg03, local04
00b64     DE AA 01 F6 | 	mov	arg04, local08
00b68     00 AC 05 F6 | 	mov	arg05, #0
00b6c     1D B0 2D F4 | 	testbn	local02, #29 wz
00b70     01 AC 05 56 |  if_ne	mov	arg05, #1
00b74     2C 01 B0 FD | 	call	#__system___uitoa
00b78     CD BA 01 F1 | 	add	local07, result1
00b7c     DF BA 59 F2 | 	cmps	local07, local09 wcz
00b80     28 00 90 ED |  if_be	jmp	#LR__0076
00b84     94 F4 9F FE | 	loc	pa,	#(@LR__0075-@LR__0074)
00b88     8C 00 A0 FD | 	call	#FCACHE_LOAD_
00b8c                 | LR__0074
00b8c     DF C0 01 F6 | 	mov	local10, local09
00b90     01 C0 55 F2 | 	cmps	local10, #1 wc
00b94     01 BE 85 F1 | 	sub	local09, #1
00b98     DC C0 01 36 |  if_ae	mov	local10, local06
00b9c     01 B8 05 31 |  if_ae	add	local06, #1
00ba0     E0 46 48 3C |  if_ae	wrbyte	#35, local10
00ba4     E4 FF 9F 3D |  if_ae	jmp	#LR__0074
00ba8                 | LR__0075
00ba8     DC 00 48 FC | 	wrbyte	#0, local06
00bac                 | LR__0076
00bac     D8 A6 01 F6 | 	mov	arg02, local02
00bb0     DB A8 01 F6 | 	mov	arg03, local05
00bb4     D7 A4 01 F6 | 	mov	arg01, local01
00bb8     14 FE BF FD | 	call	#__system___fmtstr
00bbc                 | LR__0077
00bbc     A8 F0 03 F6 | 	mov	ptra, fp
00bc0     B3 00 A0 FD | 	call	#popregs_
00bc4                 | __system___fmtnum_ret
00bc4     2D 00 64 FD | 	ret
00bc8                 | 
00bc8                 | __system___strrev
00bc8     D2 9E C9 FA | 	rdbyte	_var01, arg01 wz
00bcc     40 00 90 AD |  if_e	jmp	#__system___strrev_ret
00bd0     D2 A0 01 F6 | 	mov	_var02, arg01
00bd4     5C F4 9F FE | 	loc	pa,	#(@LR__0082-@LR__0080)
00bd8     8C 00 A0 FD | 	call	#FCACHE_LOAD_
00bdc                 | LR__0080
00bdc     D0 9E C9 FA | 	rdbyte	_var01, _var02 wz
00be0     01 A0 05 51 |  if_ne	add	_var02, #1
00be4     F4 FF 9F 5D |  if_ne	jmp	#LR__0080
00be8     01 A0 85 F1 | 	sub	_var02, #1
00bec                 | LR__0081
00bec     D2 A0 59 F2 | 	cmps	_var02, arg01 wcz
00bf0     1C 00 90 ED |  if_be	jmp	#LR__0083
00bf4     D2 9E C1 FA | 	rdbyte	_var01, arg01
00bf8     D0 A2 C1 FA | 	rdbyte	_var03, _var02
00bfc     D2 A2 41 FC | 	wrbyte	_var03, arg01
00c00     D0 9E 41 FC | 	wrbyte	_var01, _var02
00c04     01 A4 05 F1 | 	add	arg01, #1
00c08     01 A0 85 F1 | 	sub	_var02, #1
00c0c     DC FF 9F FD | 	jmp	#LR__0081
00c10                 | LR__0082
00c10                 | LR__0083
00c10                 | __system___strrev_ret
00c10     2D 00 64 FD | 	ret
00c14                 | 
00c14                 | __system___fmtpad
00c14     04 4C 05 F6 | 	mov	COUNT_, #4
00c18     A9 00 A0 FD | 	call	#pushregs_
00c1c     D3 AE 01 F6 | 	mov	local01, arg02
00c20     D4 B0 01 F6 | 	mov	local02, arg03
00c24     D7 A4 E9 F8 | 	getbyte	arg01, local01, #1
00c28     16 AE 45 F0 | 	shr	local01, #22
00c2c     03 AE 0D F5 | 	and	local01, #3 wz
00c30     00 B2 05 F6 | 	mov	local03, #0
00c34     01 AE 05 A6 |  if_e	mov	local01, #1
00c38     D5 AE C9 F7 | 	test	local01, arg04 wz
00c3c     00 9A 05 A6 |  if_e	mov	result1, #0
00c40     54 00 90 AD |  if_e	jmp	#LR__0093
00c44     D2 B0 C1 F2 | 	subr	local02, arg01
00c48     01 B0 55 F2 | 	cmps	local02, #1 wc
00c4c     00 9A 05 C6 |  if_b	mov	result1, #0
00c50     44 00 90 CD |  if_b	jmp	#LR__0093
00c54     03 AE 0D F2 | 	cmp	local01, #3 wz
00c58     18 00 90 5D |  if_ne	jmp	#LR__0090
00c5c     01 AA 0D F2 | 	cmp	arg04, #1 wz
00c60     6E AE 61 FD | 	wrz	local01
00c64     D7 B0 01 F1 | 	add	local02, local01
00c68     D8 B0 51 F6 | 	abs	local02, local02 wc
00c6c     01 B0 45 F0 | 	shr	local02, #1
00c70     D8 B0 81 F6 | 	negc	local02, local02
00c74                 | LR__0090
00c74     00 B4 05 F6 | 	mov	local04, #0
00c78                 | LR__0091
00c78     D8 B4 51 F2 | 	cmps	local04, local02 wc
00c7c     14 00 90 3D |  if_ae	jmp	#LR__0092
00c80     20 A4 05 F6 | 	mov	arg01, #32
00c84     B0 FC BF FD | 	call	#__system___tx
00c88     01 B2 05 F1 | 	add	local03, #1
00c8c     01 B4 05 F1 | 	add	local04, #1
00c90     E4 FF 9F FD | 	jmp	#LR__0091
00c94                 | LR__0092
00c94     D9 9A 01 F6 | 	mov	result1, local03
00c98                 | LR__0093
00c98     A8 F0 03 F6 | 	mov	ptra, fp
00c9c     B3 00 A0 FD | 	call	#popregs_
00ca0                 | __system___fmtpad_ret
00ca0     2D 00 64 FD | 	ret
00ca4                 | 
00ca4                 | __system___uitoa
00ca4     08 4C 05 F6 | 	mov	COUNT_, #8
00ca8     A9 00 A0 FD | 	call	#pushregs_
00cac     D2 AE 01 F6 | 	mov	local01, arg01
00cb0     D3 B0 01 F6 | 	mov	local02, arg02
00cb4     D4 B2 01 F6 | 	mov	local03, arg03
00cb8     D5 B4 01 F6 | 	mov	local04, arg04
00cbc     D6 B6 09 F6 | 	mov	local05, arg05 wz
00cc0     D7 B8 01 F6 | 	mov	local06, local01
00cc4     00 BA 05 F6 | 	mov	local07, #0
00cc8     37 BC 05 56 |  if_ne	mov	local08, #55
00ccc     57 BC 05 A6 |  if_e	mov	local08, #87
00cd0                 | LR__0100
00cd0     D9 B0 11 FD | 	qdiv	local02, local03
00cd4     19 B6 61 FD | 	getqy	local05
00cd8     D9 B0 11 FD | 	qdiv	local02, local03
00cdc     0A B6 15 F2 | 	cmp	local05, #10 wc
00ce0     30 B6 05 C1 |  if_b	add	local05, #48
00ce4     DE B6 01 31 |  if_ae	add	local05, local08
00ce8     DC B6 41 FC | 	wrbyte	local05, local06
00cec     01 B8 05 F1 | 	add	local06, #1
00cf0     01 BA 05 F1 | 	add	local07, #1
00cf4     18 B0 61 FD | 	getqx	local02
00cf8     00 B0 0D F2 | 	cmp	local02, #0 wz
00cfc     D0 FF 9F 5D |  if_ne	jmp	#LR__0100
00d00     DA BA 11 F2 | 	cmp	local07, local04 wc
00d04     C8 FF 9F CD |  if_b	jmp	#LR__0100
00d08     DC 00 48 FC | 	wrbyte	#0, local06
00d0c     D7 A4 01 F6 | 	mov	arg01, local01
00d10     B4 FE BF FD | 	call	#__system___strrev
00d14     DD 9A 01 F6 | 	mov	result1, local07
00d18     A8 F0 03 F6 | 	mov	ptra, fp
00d1c     B3 00 A0 FD | 	call	#popregs_
00d20                 | __system___uitoa_ret
00d20     2D 00 64 FD | 	ret
00d24                 | 
00d24                 | LR__0110
00d24     73 74 61 72 
00d28     74 65 64 20 
00d2c     63 6F 67 20 | 	byte	"started cog "
00d30     00          | 	byte	0
00d31                 | LR__0111
00d31     20 74 6F 20 
00d35     62 6C 69 6E 
00d39     6B 20 70 69 
00d3d     6E 20       | 	byte	" to blink pin "
00d3f     00          | 	byte	0
00d40                 | 	alignl
00d40                 | _dat_
00d40     00 00 00 00 
      ...             
00e38     00 00 00 00 
00e3c     00 00 00 00 | 	byte	$00[256]
00e40                 | 	alignl
00e40                 | __system__dat_
00e40     00 00 00 00 
00e44     00 00 00 00 | 	byte	$00[8]
00e48     03 00 00 00 
00e4c     00 00 00 00 
00e50     00 00 00 00 
00e54     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
00e58     00 00 00 00 
00e5c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
00e60                 | objmem
00e60                 | 	long	0[0]
00e60                 | stackspace
00e60     00 00 00 00 | 	long	0[1]
00e64 0cf             | 	org	COG_BSS_START
00e64 0cf             | _var01
00e64 0cf             | 	res	1
00e64 0d0             | _var02
00e64 0d0             | 	res	1
00e64 0d1             | _var03
00e64 0d1             | 	res	1
00e64 0d2             | arg01
00e64 0d2             | 	res	1
00e64 0d3             | arg02
00e64 0d3             | 	res	1
00e64 0d4             | arg03
00e64 0d4             | 	res	1
00e64 0d5             | arg04
00e64 0d5             | 	res	1
00e64 0d6             | arg05
00e64 0d6             | 	res	1
00e64 0d7             | local01
00e64 0d7             | 	res	1
00e64 0d8             | local02
00e64 0d8             | 	res	1
00e64 0d9             | local03
00e64 0d9             | 	res	1
00e64 0da             | local04
00e64 0da             | 	res	1
00e64 0db             | local05
00e64 0db             | 	res	1
00e64 0dc             | local06
00e64 0dc             | 	res	1
00e64 0dd             | local07
00e64 0dd             | 	res	1
00e64 0de             | local08
00e64 0de             | 	res	1
00e64 0df             | local09
00e64 0df             | 	res	1
00e64 0e0             | local10
00e64 0e0             | 	res	1
00e64 0e1             | local11
00e64 0e1             | 	res	1
00e64 0e2             | muldiva_
00e64 0e2             | 	res	1
00e64 0e3             | muldivb_
00e64 0e3             | 	res	1
00e64 0e4             | 	fit	480
00e64 0e4             | 
